import pandas as pd
import smtplib
import imaplib
import email
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler
from email.header import decode_header
from email.header import decode_header
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 587
IMAP_SERVER = "imap.yandex.ru"
EMAIL = "zaharov.egor.2003@yandex.ru"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
PASSWORD = "tqyxemaddulynkfc"  # –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ tasks.xlsx
if not os.path.exists("tasks.xlsx"):
    df = pd.DataFrame(columns=["–ó–∞–¥–∞—á–∞", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Email", "–î–µ–¥–ª–∞–π–Ω", "–°—Ç–∞—Ç—É—Å"])
    df.to_excel("tasks.xlsx", index=False)
    print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª tasks.xlsx")

def load_tasks():
    try:
        return pd.read_excel("tasks.xlsx")
    except FileNotFoundError:
        print("–§–∞–π–ª tasks.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        df = pd.DataFrame(columns=["–ó–∞–¥–∞—á–∞", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "Email", "–î–µ–¥–ª–∞–π–Ω", "–°—Ç–∞—Ç—É—Å"])
        df.to_excel("tasks.xlsx", index=False)
        return df

def send_email(to_email, task, assignee, deadline):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL
        msg['To'] = to_email
        msg['Subject'] = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞—á–∞ ¬´{task}¬ª"

        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {assignee},

                –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–¥–∞—á–µ: ¬´{task}¬ª.
                –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}.

                –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Ü–∏—Ñ—Ä–æ–π:
                1 ‚Äî –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞,
                2 ‚Äî –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."""
        msg.attach(MIMEText(body, 'plain'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL, PASSWORD)
            server.send_message(msg)
        print(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

def check_deadlines():
    try:
        df = load_tasks()
        today = datetime.now().date()

        for index, row in df.iterrows():
            deadline = pd.to_datetime(row['–î–µ–¥–ª–∞–π–Ω']).date()
            if (deadline - today).days == 1:
                send_email(
                    to_email=row['Email'],
                    task=row['–ó–∞–¥–∞—á–∞'],
                    assignee=row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'],
                    deadline=row['–î–µ–¥–ª–∞–π–Ω']
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_deadlines: {e}")


def decode_mime_header(header):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç MIME-–∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    if header is None:
        return ""
    decoded_parts = []
    for part, encoding in decode_header(header):
        if isinstance(part, bytes):
            decoded_parts.append(part.decode(encoding or 'utf-8', errors='replace'))
        else:
            decoded_parts.append(str(part))
    return "".join(decoded_parts)


def check_responses():
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã...")
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, PASSWORD)
        mail.select("inbox")

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        status, messages = mail.search(None, "UNSEEN")
        if status != "OK" or not messages[0]:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(messages[0].split())} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")

        for num in messages[0].split():
            try:
                print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ #{num.decode()}")
                status, data = mail.fetch(num, "(RFC822)")
                if status != "OK":
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞ #{num}")
                    continue

                msg = email.message_from_bytes(data[0][1])

                subject = decode_mime_header(msg.get("Subject"))
                print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞: {subject}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—É —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                if not re.search(r"Re:\s*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", subject, re.IGNORECASE):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_header = msg.get("From", "")
                from_email = ""
                if "<" in from_header and ">" in from_header:
                    from_email = from_header.split("<")[1].split(">")[0]
                else:
                    from_email = from_header
                print(f"–û—Ç: {from_email}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
                from_header = msg.get("From", "")
                from_email = re.search(r'<(.+?)>', from_header) or re.search(r'(\S+@\S+)', from_header)
                from_email = from_email.group(1) if from_email else ""

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ –ø–∏—Å—å–º–æ
                if not subject.startswith("Re: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"):
                    print("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –Ω–∞—à –æ—Ç–≤–µ—Ç")
                    continue

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        content_type = part.get_content_type()
                        content_disposition = str(part.get("Content-Disposition"))
                        if content_type == "text/plain" and "attachment" not in content_disposition:
                            body = part.get_payload(decode=True).decode()
                            break
                else:
                    body = msg.get_payload(decode=True).decode()

                print(f"–¢–µ–ª–æ –ø–∏—Å—å–º–∞:\n{body[:200]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–ª–∞

                clean_body = re.sub(r'\s+', '', body)
                
                # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–∏—Ñ—Ä
                if re.search(r'(^|[^0-9])1([^0-9]|$)', clean_body):
                    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {from_email}")
                    update_status(from_email, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                elif re.search(r'(^|[^0-9])2([^0-9]|$)', clean_body):
                    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {from_email}")
                    update_status(from_email, "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                else:
                    print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–∏—Ñ—Ä 1 –∏–ª–∏ 2 –≤ –ø–∏—Å—å–º–µ –æ—Ç {from_email}")

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                mail.store(num, "+FLAGS", "\\Seen")
                print("–ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞ #{num}: {e}")
                continue

        mail.close()
        mail.logout()
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_responses: {e}")


def update_status(email, status):
    try:
        df = pd.read_excel("tasks.xlsx")
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ email (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        mask = df["Email"].str.lower() == email.lower()
        if not any(mask):
            print(f"‚ö†Ô∏è Email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ tasks.xlsx")
            return
            
        df.loc[mask, "–°—Ç–∞—Ç—É—Å"] = status
        df.to_excel("tasks.xlsx", index=False)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {email}: {status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

def job():
    print("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
    check_deadlines()
    check_responses()

# if __name__ == "__main__":
#     print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")
#     try:
#         scheduler = BlockingScheduler()
#         scheduler.add_job(job, 'cron', hour=9)
#         print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
#         scheduler.start()
#     except KeyboardInterrupt:
#         print("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞: {e}")

job()